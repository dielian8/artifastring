/**
\mainpage Artifastring

Artifastring ("artificial fast string") is a highly optimized
physical simulation of a violin for sound synthesis.


\section quick_start 1. Quick start

\subsection download 1.1 Download

The latest tarball release can be downloaded from:
http://percival-music.ca/artifastring/artifastring-latest.tar.gz

Development takes place at:
https://github.com/gperciva/artifastring


\subsection compile 1.2 Compile

Requires a typical development environment including \c g++ with
the \c scons build system being recommended.

\code
scons -h
\endcode

If you do not have \c scons then you can still compile with the \c
.c and \c .h files directly.  This is demonstrated in
\ref use_in_code.


\subsection generate_audio 1.3 Generate audio

\code
./actions2wav twinkle.actions
\endcode

The format of the \c ".actions" file is described in
\ref file_format.

You may also use it in C++ code directly; this is described in
\ref use_in_code.  Python bindings are available; see \ref swig.


\subsection generate_video 1.4 Generate video

Video can be produced with \c blender.  At the moment, this is not
integerated into the \c scons build system; instead, go to
\c blender/ and follow the instructions in the README there.


\section background 2. Background

\subsection references 2.1 References

Artifastring is an implementation of modal bowed string physical
modelling as described by:

- Matthias Demoucron's 2008 PhD thesis:
  http://recherche.ircam.fr/equipes/instruments/demoucron

- M. Demoucron and N. Rasamimanana, "Score based real-time
  performance with a virtual violin", Proceedings of the 12th
  International Conference on Digital Audio Effects (DAFx-09),
  Como, Italy, September 1-4, 2009.
  http://articles.ircam.fr/textes/Demoucron09a/index.pdf

\subsection known_limits 2.2 Known limitations

Despite the recent dates, this model is relatively old (early
1990s?) and does not represent the most accurate simulation known
to researchers.  In particular, the friction of bowing is
estimated with a hyperbolic curve, rather than a more accurate
double-exponential curve, or hysteresis behaviour due to the rosin
melting and cooling during bowing.

This model was not chosen for accuracy; rather for being simple
yet still "good enough" for our desires.  Don't criticize it for
being "not sufficiently accurate" for whatever you want to do.

In addition, the modal dampening factors used here were determined
experimentally for the D string (in Demoucron's thesis) -- we have
not (yet) reproduced those experiments for the other strings.
This may produce unrealistic behaviour, especially from the E
string.


\subsection ack 2.3 Acknowledgements

This project would not have been possible without initial work by
my supervisor, Dr. Nick Bailey, in understanding and explaining
the model (in language, diagrams, and code).  Many thanks also to
Dr.  John Williamson and Dr. Martin Macauley for clarifying some
more abstract parts of the model.

Many thanks also to Matthias Demoucron for clarifying some
physical constants (especially the slope of friction charactistics
v<SUB>0</SUB>) in personal email.


\section file_format 3. File format

The general syntax of each line is:

\code
action_type   seconds   parameters...
\endcode

Lines must be divided with tabs, with one command per line.  A
line beginning with a # hash is a comment.

There are four types of commands.  All commands begin with the \c
action_type and \c seconds.  \c seconds is the absolute time since
the beginning of the audio, not the relative time since the last
command.

- wait: no extra parameters
  \code
  w       2.0
  \endcode

- finger: 2 extra parameters: string number, and finger position
  \code
  f       2.0       3       0.109101
  \endcode

- pluck: 3 extra parameters: string number, pluck position, and
  pluck force.
  \code
  p       2.5       3       0.25       0.8
  \endcode

- bow: 4 extra parameters: string number, bow position, bow force,
  and bow velocity
  \code
  b       3.0       3       0.12       0.6       0.4
  \endcode

See files in the \c music/ directory for examples.



\section use_in_code 4. Use in code

Input code:

\include "simple.cpp"

To compile (after installing):

\code
g++ simple.cpp -lartifastring
\endcode

Manual compile (with no installation):

\code
g++ violin_instrument.cpp violin_string.cpp monowav.cpp simple.cpp -o simple
\endcode


\section swig 5. Swig python bindings

SWIG bindings are built automatically if possible.

\code
./play-file.py twinkle.actions
\endcode


\section copyright 6. Copyright

Short answer: GNU GPL 3.0+

Long answer:

\verbatim
Copyright 2010--2011 Graham Percival

Artifastring is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

Artifastring is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with Artifastring.  If not, see
<http://www.gnu.org/licenses/>.
\endverbatim


\section future_work 7. Future work

Development of Artifastring is (temporarily) stalled; now that the
basic model is working, we want to actually \em use it to make
music, demonstrate bowing patterns, and all sorts of related
things.  Those efforts take place in a separate code base, though.

As mentioned in \ref known_limits, some of the physical constants
(especially the modal dampening factors) are incorrect for strings
other than the D string.  Measuring these values for the other
strings should only take a few hours once all the relevant
hardware and software has been accumulated.

At some point, it would be nice to add support for other stringed
instruments -- this should simply be a matter of measuring their
physical constants, or perhaps simply finding such
already-measured values in the literature.  But that is a task we
will consider after the current round of conference paper
deadlines.  :)


*/

